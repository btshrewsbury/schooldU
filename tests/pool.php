<?phpini_set('display_errors', 1);error_reporting(E_ALL);require_once($_SERVER["DOCUMENT_ROOT"] . "/simpletest/autorun.php");require_once($_SERVER["DOCUMENT_ROOT"] . "/structs/pool.php");class TestOfPooltruct extends UnitTestCase {    function __construct() {        parent::__construct('challenge struct Test');    }	function testPoolCreationStoreAndDelete() {			$aPool = new Pool(null);				$this->assertNull($aPool->get_challenge_id());		$this->assertNull($aPool->get_user_id());		$this->assertNull($aPool->get_user());		$this->assertNull($aPool->get_game_id());		$this->assertNull($aPool->get_game());		$this->assertNull($aPool->get_charity_id());		$this->assertNull($aPool->get_charity());		$this->assertNull($aPool->get_amount());				$aPool->set_user_id(97);		$aPool->set_game_id(167451);		$aPool->set_charity_id(9);			$aPool->set_amount(5);				$this->assertNull($aPool->get_challenge_id());		$this->assertEqual($aPool->get_user_id(),97);		$this->assertNotNull($aPool->get_user());		$this->assertEqual($aPool->get_game_id(),167451);		$this->assertNotNull($aPool->get_game());		$this->assertEqual($aPool->get_charity_id(),9);		$this->assertNotNull($aPool->get_charity());		$this->assertEqual($aPool->get_amount(),5);				$aPool->save();		$this->assertNotNull($aPool->get_challenge_id());				$samePool = Pool::getChallengeById($aPool->get_challenge_id());		$this->assertEqual($samePool->get_challenge_id(),$aPool->get_challenge_id());		$this->assertEqual($samePool->get_user_id(),97);		$this->assertNotNull($samePool->get_user());		$this->assertEqual($samePool->get_game_id(),167451);		$this->assertNotNull($samePool->get_game());		$this->assertEqual($samePool->get_charity_id(),9);		$this->assertNotNull($samePool->get_charity());		$this->assertEqual($samePool->get_amount(),5);				$samePool->delete();		$samePool = Pool::getChallengeById($aPool->get_challenge_id());		$this->assertNull($samePool);    }		}?>