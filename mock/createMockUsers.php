<?phpclass MockUsers{    public $users = array();	private $currentIndex = 0;	private $order;	private $names = array("Brandon Shrewsbury",							"Natalie Attaya",							"Taylor Stanley",							"Shelly Brenckman",							"Jesus Morales",							"Travis Crawford");								private $pictures = array("Brandon_Shrewsbury.jpg",								"Natalie_Attaya.jpg",								"Taylor_Stanley.jpg",								"Shelly_Brenckman.jpg",								"Jesus_Morales.jpg",								"Travis_Crawford.jpg");		private $schools = array("University Of West Georgia",								"Texas A&M",								"Texas A&M",								"Texas A&M",								"Texas A&M",								"Texas A&M");									private $numbers;			public function __construct() 	{		for($i = 0; $i < sizeof($this->names); $i++)		{			$this->users[$i] = new User();			$this->users[$i]->name = $this->names[$i];			$this->users[$i]->homeSchool = $this->schools[$i];			$this->users[$i]->pictureUrl = "img/profile_thumb/" . $this->pictures[$i];			$this->users[$i]->moneyDonated = rand(0, 20) * 14 + rand(0, 9);			$this->users[$i]->matchesWon =   rand(0, 40);		}		$this->numbers = range(0, sizeof($this->users));        shuffle($this->numbers);		    }		public function resetUniqueIndex()	{		$this->currentIndex = 0;		shuffle($this->numbers);	}		public function getUniqueUser()	{		if($this->currentIndex < sizeof($this->users))		{			$userToReturn = $this->users[$this->numbers[$this->currentIndex]];			$this->currentIndex++;			return $userToReturn;		}		return NULL;	}		public function getRandomUser()	{		return $this->users[rand(0, sizeof($this->users) - 1)];	}}?>